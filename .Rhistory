geom_histogram()
install.packages("esquisse")
esquisse::esquisser(palmerpenguins::penguins)
install.packages('palmerpennguins')
install.packages('palmerpenguins')
esquisse::esquisser(palmerpenguins::penguins)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("myvariant")
rm(list = )
rm(list = ls())
library(readr)
all_pgx_TCGA <- read_csv("Projects/snpettes/data/all_pgx_TCGA.csv")
View(all_pgx_TCGA)
dd <- all_pgx_TCGA
summary(dd)
rm(list = ls())
library(tidyverse)
library(ggplot2)
df <- read_csv("Projects/snpettes/data/all_pgx_TCGA.csv")
# cols.num <- colnames(df)
# df[cols.num] <- sapply(df[cols.num], as.factor)
df <- as.data.frame(unclass(df),                     # Convert all columns to factor
stringsAsFactors = TRUE)
summary(df)
install.packages("pgxRpi")
install.packages("devtools")
devtools::install_github("progenetix/pgxRpi")
library(pgxRpi)
?pgxRpi
??pgxRpi
browseVignettes()
browseVignettes("pgxRpi")
library(BiocStyle)
install.packages(BiocStyle)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
devtools::install_github("progenetix/pgxRpi",build_vignettes = T)
browseVignettes(pgxRpi)
library(pgxRpi)
browseVignettes(pgxRpi)
devtools::install_github("progenetix/pgxRpi",build_vignettes = T)
browseVignettes(pgxRpi)
library(pgxRpi)
browseVignettes(pgxRpi)
getwd()
dd <- read.csv("Projects/snpettes/master/data/hits.csv")
head(dd)
colnames(dd)
colnames(dd)[1]
colnames(dd)[1] <- "Genes"
colnames(dd)[1]
colnames(dd)[1] <- "genes"
colnames(dd)
dd <- read.csv("Projects/snpettes/master/data/hits.csv")
head(dd)
dd[1]
dd[2]
dd <- dd[2:]
head(dd)
dd <- dd[,2:]
dd <- dd[2:,]
dd <- dd[-c(1)]
head(dd)
ggplot()
dd <- dd[-1]
head(dd)
dd <- read.csv("Projects/snpettes/master/data/hits.csv")
dd <- dd[-1]
head(dd)
summary(dd)
library(ggplot2)
library(tidyverse)
library(ggpubr)
dd <- read.csv("data/hits.csv")
library(ggplot2)
library(tidyverse)
library(ggpubr)
dd <- read.csv("data/hits.csv")
getwd()
setwd("/Users/kayvongrunigen/Projects/snpettes")
genes_with_only_snv <- dd[
dd$double_hits == 0
& dd$only_cnv == 0
& dd$only_snv > 0,]
library(ggplot2)
library(tidyverse)
library(ggpubr)
dd <- read.csv("data/hits.csv")
dd <- dd[-1]
head(dd)
summary(dd)
# Remove genes with no samples
genes_without_samples <- dd[dd$sample_count == 0, "genes"]
length(genes_without_samples)
dd <- dd[dd$sample_count > 0, ]
# Look for genes with double hits but no only cnv or snv
genes_with_only_doublehits <- dd[
dd$double_hits > 0
& dd$only_cnv == 0
& dd$only_snv == 0,
"genes"]
length(genes_with_only_doublehits) # 0 genes
# Look for genes with only cnv or snv
genes_with_only_cnv <- dd[
dd$double_hits == 0
& dd$only_cnv > 0
& dd$only_snv == 0,]
dim(genes_with_only_cnv) # 18'610 genes
genes_with_only_snv <- dd[
dd$double_hits == 0
& dd$only_cnv == 0
& dd$only_snv > 0,]
dim(genes_with_only_snv)[1] # 635 genes
genes_with_doublehits <- dd[dd$double_hits > 0,]
dim(genes_with_doublehits)[1] # 19'963 genes
ggarrange(
ggplot(dd, aes(x=sample_count)) +
geom_histogram(bins = 50, fill = '#0e67f5', col='black') +
theme_minimal(),
ggplot(dd, aes(x=only_cnv)) +
geom_histogram(bins = 50, fill = '#1adc41', col='black') +
theme_minimal(),
ggplot(dd, aes(x=only_snv)) +
geom_histogram(bins = 50, fill = '#e49031', col='black') +
scale_x_continuous(trans = 'log10') +
theme_minimal(),
ggplot(dd, aes(x=double_hits)) +
geom_histogram(bins = 50, fill = '#a723df', col='black') +
scale_x_continuous(trans = 'log10') +
theme_minimal()
)
ggarrange(
ggplot(dd, aes(x=sample_count)) +
geom_histogram(bins = 50, fill = '#0e67f5', col='black') +
theme_minimal(),
ggplot(dd, aes(x=only_cnv)) +
geom_histogram(bins = 50, fill = '#1adc41', col='black') +
theme_minimal(),
ggplot(dd, aes(x=only_snv)) +
geom_histogram(bins = 50, fill = '#e49031', col='black') +
theme_minimal(),
ggplot(dd, aes(x=double_hits)) +
geom_histogram(bins = 50, fill = '#a723df', col='black') +
theme_minimal(),
ncol = 4, nrow = 1, # Adjust the number of columns and rows
widths = c(5, 5), heights = c(5, 5), # Adjust the size of individual plots
common.legend = TRUE, legend = 'bottom' # Add a common legend at the bottom
)
ggarrange(
ggplot(dd, aes(x=sample_count)) +
geom_histogram(bins = 50, fill = '#0e67f5', col='black') +
labs(y="Genes")+
theme_minimal(),
ggplot(dd, aes(x=only_cnv)) +
geom_histogram(bins = 50, fill = '#1adc41', col='black') +
theme_minimal(),
ggplot(dd, aes(x=only_snv)) +
geom_histogram(bins = 50, fill = '#e49031', col='black') +
theme_minimal(),
ggplot(dd, aes(x=double_hits)) +
geom_histogram(bins = 50, fill = '#a723df', col='black') +
theme_minimal(),
ncol = 4, nrow = 1, # Adjust the number of columns and rows
widths = c(5, 5), heights = c(5, 5), # Adjust the size of individual plots
common.legend = TRUE, legend = 'bottom' # Add a common legend at the bottom
)
ggarrange(
ggplot(dd, aes(x=sample_count)) +
geom_histogram(bins = 50, fill = '#0e67f5', col='black') +
labs(y="Genes", x="Total samples")+
theme_minimal(),
ggplot(dd, aes(x=only_cnv)) +
geom_histogram(bins = 50, fill = '#1adc41', col='black') +
labs(y="", x="Only CNV")+
theme_minimal(),
ggplot(dd, aes(x=only_snv)) +
geom_histogram(bins = 50, fill = '#e49031', col='black') +
labs(y="", x="Only SNV")+
theme_minimal(),
ggplot(dd, aes(x=double_hits)) +
geom_histogram(bins = 50, fill = '#a723df', col='black') +
labs(y="", x="CNV and SNV")+
theme_minimal(),
ncol = 4, nrow = 1, # Adjust the number of columns and rows
widths = c(5, 5), heights = c(5, 5), # Adjust the size of individual plots
common.legend = TRUE, legend = 'bottom' # Add a common legend at the bottom
)
ggarrange(
ggplot(dd, aes(x=sample_count)) +
geom_histogram(bins = 50, fill = '#0e67f5', col='black') +
labs(y="Genes", x="Total samples")+
theme_minimal(),
ggplot(dd, aes(x=only_cnv)) +
geom_histogram(bins = 50, fill = '#1adc41', col='black') +
labs(y="", x="Only CNV")+
theme_minimal(),
ggplot(dd, aes(x=only_snv)) +
geom_histogram(bins = 50, fill = '#e49031', col='black') +
labs(y="", x="Only SNV")+
scale_x_continuous(trans = 'log10') +
theme_minimal(),
ggplot(dd, aes(x=double_hits)) +
geom_histogram(bins = 50, fill = '#a723df', col='black') +
labs(y="", x="CNV and SNV")+
scale_x_continuous(trans = 'log10') +
theme_minimal(),
ncol = 4, nrow = 1, # Adjust the number of columns and rows
widths = c(5, 5), heights = c(5, 5), # Adjust the size of individual plots
common.legend = TRUE, legend = 'bottom' # Add a common legend at the bottom
)
ggarrange(
ggplot(dd, aes(x=sample_count)) +
geom_histogram(bins = 50, fill = '#0e67f5', col='black') +
labs(y="Genes", x="Total samples")+
theme_minimal(),
ggplot(dd, aes(x=only_cnv)) +
geom_histogram(bins = 50, fill = '#1adc41', col='black') +
labs(y="", x="Only CNV")+
theme_minimal(),
ggplot(dd, aes(x=only_snv)) +
geom_histogram(bins = 50, fill = '#e49031', col='black') +
labs(y="", x="Only SNV (log)")+
scale_x_continuous(trans = 'log10') +
theme_minimal(),
ggplot(dd, aes(x=double_hits)) +
geom_histogram(bins = 50, fill = '#a723df', col='black') +
labs(y="", x="CNV and SNV (log)")+
scale_x_continuous(trans = 'log10') +
theme_minimal(),
ncol = 4, nrow = 1, # Adjust the number of columns and rows
widths = c(5, 5), heights = c(5, 5), # Adjust the size of individual plots
common.legend = TRUE, legend = 'bottom' # Add a common legend at the bottom
)
rm(list = ls())
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
library(TCGAutils)
# Import data frame and extract barcodes
cat("Loading data...\n")
data <- read_csv("data/maf_data.csv", show_col_types = FALSE)
if ("Tumor_Sample_UUID" %in% colnames(data) == TRUE) {
# Information to be extracted for variant import
data <- data %>% select(c("Tumor_Sample_UUID",
"case_id", "Chromosome",
"Start_Position", "End_Position",
"Variant_Classification", "Variant_Type",
"Reference_Allele", "Tumor_Seq_Allele2",
"Tumor_Sample_Barcode"))
if (nchar(data$Tumor_Sample_Barcode[1]) > 16) {
data$aliquot_barcode <- data$Tumor_Sample_Barcode
data$Tumor_Sample_Barcode <- substr(data$Tumor_Sample_Barcode, 1, 16)
sample_barcodes <- unique(data["Tumor_Sample_Barcode"])
# Create an empty list for the ids
sample_ids <- list()
# Convert barcodes into ids
cat("Converting barcode to sample UUID...\n")
for (id in sample_barcodes){
sam <- barcodeToUUID(id)
sam <- sam$sample_ids
sample_ids <- c(sample_ids, sam)
}
# Make a data frame for mapping
mapping_df <- data.frame(unlist(as.list(sample_barcodes)), unlist(sample_ids))
colnames(mapping_df) <- c("sample_barcode", "sample_ids")
# Join the two data frames based on matching Barcodes
mapfile <- left_join(data, mapping_df,
by = c("Tumor_Sample_Barcode" = "sample_barcode"))
cat("Converting completed.\n")
# Renaming for further processing
#####################################################################
# Rename the columns
colnames(mapfile) <- c("aliquot_id", "case_id", "chromosome",
"start", "end", "variant_classification", "snv_type",
"reference_bases", "alternate_bases", "sample_barcode",
"aliquot_barcode", "sample_id")
# Select important ones and rearrange
mapfile <- mapfile %>% select(case_id, sample_id, aliquot_id,
chromosome, start, end,
variant_classification, snv_type,
reference_bases, alternate_bases)
cat("Writing output file...\n")
# Write file
write_tsv(mapfile, "data/pgx_import.tsv")
cat("Done\n")
} else {
cat("No conversion necessary.\n")
mapfile <- data
colnames(mapfile) <- c("sample_id", "case_id", "chromosome",
"start", "end", "variant_classification", "snv_type",
"reference_bases", "alternate_bases", "sample_barcode")
# Select important ones and rearrange
mapfile <- mapfile %>% select(case_id, sample_id,
chromosome, start, end,
variant_classification, snv_type,
reference_bases, alternate_bases)
cat("Writing output file...\n")
# Write file
write_tsv(mapfile, "data/pgx_import.tsv")
}} else {
cat('No Tumor_Sample_UUID found. Please check your input file.\n')
}
data <- data %>% select(c("Tumor_Sample_UUID",
"case_id", "Chromosome",
"Start_Position", "End_Position",
"Variant_Classification", "Variant_Type",
"Reference_Allele", "Tumor_Seq_Allele2",
"Tumor_Sample_Barcode"))
if (nchar(data$Tumor_Sample_Barcode[1]) > 16) {
data$aliquot_barcode <- data$Tumor_Sample_Barcode
data$Tumor_Sample_Barcode <- substr(data$Tumor_Sample_Barcode, 1, 16)
sample_barcodes <- unique(data["Tumor_Sample_Barcode"])
# Create an empty list for the ids
sample_ids <- list()
# Convert barcodes into ids
cat("Converting barcode to sample UUID...\n")
for (id in sample_barcodes){
sam <- barcodeToUUID(id)
sam <- sam$sample_ids
sample_ids <- c(sample_ids, sam)
}
# Make a data frame for mapping
mapping_df <- data.frame(unlist(as.list(sample_barcodes)), unlist(sample_ids))
colnames(mapping_df) <- c("sample_barcode", "sample_ids")
# Join the two data frames based on matching Barcodes
mapfile <- left_join(data, mapping_df,
by = c("Tumor_Sample_Barcode" = "sample_barcode"))
cat("Converting completed.\n")
)
rm(list = ls(0))
rm(list = ls())
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
library(TCGAutils)
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
library(TCGAutils)
# Import data frame and extract barcodes
cat("Loading data...\n")
data <- read_csv("data/maf_data.csv", show_col_types = FALSE)
data <- data %>% select(c("Tumor_Sample_UUID",
"case_id", "Chromosome",
"Start_Position", "End_Position",
"Variant_Classification", "Variant_Type",
"Reference_Allele", "Tumor_Seq_Allele2",
"Tumor_Sample_Barcode", "vcf_anchor_base"))
sample_barcodes <- unique(data["Tumor_Sample_Barcode"])
sample_ids <- list()
# Convert barcodes into ids
cat("Converting barcode to sample UUID...\n")
for (id in sample_barcodes){
sam <- barcodeToUUID(id)
sam <- sam$sample_ids
sample_ids <- c(sample_ids, sam)
}
# Make a data frame for mapping
mapping_df <- data.frame(unlist(as.list(sample_barcodes)), unlist(sample_ids))
data <- data %>% select(c("Tumor_Sample_UUID",
"case_id", "Chromosome",
"Start_Position", "End_Position",
"Variant_Classification", "Variant_Type",
"Reference_Allele", "Tumor_Seq_Allele2",
"Tumor_Sample_Barcode", "vcf_anchor_base"))
data <- read_csv("data/maf_data.csv", show_col_types = FALSE)
data <- data %>% select(c("Tumor_Sample_UUID",
"case_id", "Chromosome",
"Start_Position", "End_Position",
"Variant_Classification", "Variant_Type",
"Reference_Allele", "Tumor_Seq_Allele2",
"Tumor_Sample_Barcode", "vcf_anchor_base"))
pwd()
getwd()
setwd("/Users/kayvongrunigen/Projects/maf4pgx")
data <- read_csv("data/maf_data.csv", show_col_types = FALSE)
data <- data %>% select(c("Tumor_Sample_UUID",
"case_id", "Chromosome",
"Start_Position", "End_Position",
"Variant_Classification", "Variant_Type",
"Reference_Allele", "Tumor_Seq_Allele2",
"Tumor_Sample_Barcode", "vcf_anchor_base"))
data$aliquot_barcode <- data$Tumor_Sample_Barcode
data$Tumor_Sample_Barcode <- substr(data$Tumor_Sample_Barcode, 1, 16)
sample_barcodes <- unique(data["Tumor_Sample_Barcode"])
# Create an empty list for the ids
sample_ids <- list()
# Convert barcodes into ids
cat("Converting barcode to sample UUID...\n")
for (id in sample_barcodes){
sam <- barcodeToUUID(id)
sam <- sam$sample_ids
sample_ids <- c(sample_ids, sam)
}
# Make a data frame for mapping
mapping_df <- data.frame(unlist(as.list(sample_barcodes)), unlist(sample_ids))
colnames(mapping_df) <- c("sample_barcode", "sample_ids")
# Join the two data frames based on matching Barcodes
mapfile <- left_join(data, mapping_df,
by = c("Tumor_Sample_Barcode" = "sample_barcode"))
cat("Converting completed.\n")
# Renaming for further processing
# Rename the columns
mapfile %<%
rename(
aliquot_id = Tumor_Sample_UUID,
chromosome = Chromosome,
start = Start_Position,
end = End_Position,
variant_classification = Variant_Classification,
snv_type = Variant_Type,
reference_bases = Reference_Allele,
alternate_bases = Tumor_Seq_Allele2,
sample_barcode = Tumor_Sample_Barcode
)
# Rename the columns
mapfile %>%
rename(
aliquot_id = Tumor_Sample_UUID,
chromosome = Chromosome,
start = Start_Position,
end = End_Position,
variant_classification = Variant_Classification,
snv_type = Variant_Type,
reference_bases = Reference_Allele,
alternate_bases = Tumor_Seq_Allele2,
sample_barcode = Tumor_Sample_Barcode
)
# Rename the columns
mapfile <- mapfile %>%
rename(
aliquot_id = Tumor_Sample_UUID,
chromosome = Chromosome,
start = Start_Position,
end = End_Position,
variant_classification = Variant_Classification,
snv_type = Variant_Type,
reference_bases = Reference_Allele,
alternate_bases = Tumor_Seq_Allele2,
sample_barcode = Tumor_Sample_Barcode
)
# Select needed columns and rearrange
mapfile <- mapfile %>% select(case_id, sample_id, aliquot_id,
chromosome, start, end,
variant_classification, snv_type,
reference_bases, alternate_bases, vcf_anchor_base)
# Rename the columns
mapfile <- mapfile %>%
rename(
aliquot_id = Tumor_Sample_UUID,
chromosome = Chromosome,
start = Start_Position,
end = End_Position,
variant_classification = Variant_Classification,
snv_type = Variant_Type,
reference_bases = Reference_Allele,
alternate_bases = Tumor_Seq_Allele2,
sample_barcode = Tumor_Sample_Barcode
sample_id = sample_ids
# Rename the columns
mapfile <- mapfile %>%
rename(
aliquot_id = Tumor_Sample_UUID,
chromosome = Chromosome,
start = Start_Position,
end = End_Position,
variant_classification = Variant_Classification,
snv_type = Variant_Type,
reference_bases = Reference_Allele,
alternate_bases = Tumor_Seq_Allele2,
sample_barcode = Tumor_Sample_Barcode,
sample_id = sample_ids
)
# Rename the columns
mapfile <- mapfile %>%
rename(
aliquot_id = Tumor_Sample_UUID,
chromosome = Chromosome,
start = Start_Position,
end = End_Position,
variant_classification = Variant_Classification,
snv_type = Variant_Type,
reference_bases = Reference_Allele,
alternate_bases = Tumor_Seq_Allele2,
sample_barcode = Tumor_Sample_Barcode,
sample_id = sample_ids
)
# Join the two data frames based on matching Barcodes
mapfile <- left_join(data, mapping_df,
by = c("Tumor_Sample_Barcode" = "sample_barcode"))
# Rename the columns
mapfile <- mapfile %>%
rename(
aliquot_id = Tumor_Sample_UUID,
chromosome = Chromosome,
start = Start_Position,
end = End_Position,
variant_classification = Variant_Classification,
snv_type = Variant_Type,
reference_bases = Reference_Allele,
alternate_bases = Tumor_Seq_Allele2,
sample_barcode = Tumor_Sample_Barcode,
sample_id = sample_ids
)
# Select needed columns and rearrange
mapfile <- mapfile %>% select(case_id, sample_id, aliquot_id,
chromosome, start, end,
variant_classification, snv_type,
reference_bases, alternate_bases,
vcf_anchor_base)
cat("Writing output file...\n")
# Write file
write_tsv(mapfile, "data/pgx_import.tsv")
