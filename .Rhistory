y = 'Number of Variants (log-scale)') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, face = 'bold'),
plot.subtitle = element_text(hjust = 0.5, face = 'italic'))
# Variants vs CNV fraction -----------------------------------------------------
## Per project ---
plot_snv_cnv_fraction <-
ggplot(variants_per_biosample_project, aes(log(num_variants), cnvfraction)) +
geom_point(aes(col = project), show.legend = FALSE) +
stat_smooth(method = 'lm', formula = y ~ x, geom = 'smooth') +
facet_wrap(~project)+
labs(x = 'Number of variants (log10)',
y = 'CNV Fraction')+
theme_minimal()
## Simple representation of the data set ----------------------------------------
### Individuals -----------------------------------------------------------------
#### Age ------------------------------------------------------------------------
age <- ggplot(dd, aes(age_at_diagnosis)) +
geom_histogram(aes(y =..density..), fill = 'lightblue', col = 'black',
binwidth = 5)+
geom_vline(aes(xintercept = mean(age_at_diagnosis, na.rm = TRUE)), size = 1,
lty = 2, col = 'red', alpha = .8, show.legend = FALSE)+
labs(title = 'Age distribution',
subtitle = 'Mean overlaid')+
xlab('')+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 16),
plot.subtitle = element_text(hjust = 0.5, face = 'italic', size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
plot.margin = margin(1, 1.5, 1, 1.5, "cm"))
age
#### Followup -------------------------------------------------------------------
vital <- ggplot(dd, aes(followup_state))+
geom_bar(aes(followup_state, fill = sex), col = 'black', position = 'dodge')+
labs(title = 'Vital status',
subtitle = 'Grouped by sex')+
xlab('')+
ylab('Count')+
guides(fill=guide_legend(title="Sex"))+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 16),
plot.subtitle = element_text(hjust = 0.5, face = 'italic', size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 14, face = 'bold'),
legend.text = element_text(size = 12),
plot.margin = margin(1, 1.5, 1, 1.5, "cm"))
vital
stage <- ggplot(dd, aes(main_stage))+
geom_bar(fill = 'lightblue', col = 'black')+
labs(title = 'Stage')+
xlab('')+
ylab('Count')+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 16),
plot.subtitle = element_text(hjust = 0.5, face = 'italic', size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
plot.margin = margin(1, 1.5, 1, 1.5, "cm"))
stage
# Add a new column for main stages
dd$main_stage <- substage_to_main[dd$stage]
#### Stage ---------------------------------------------------------------------
# Create a mapping of substages to main stages
substage_to_main <- c("Stage 0" = "Stage 0",
"Stage I" = "Stage I",
"Stage IA" = "Stage I",
"Stage IB" = "Stage I",
"Stage II" = "Stage II",
"Stage IIA" = "Stage II",
"Stage IIB" = "Stage II",
"Stage IIC" = "Stage II",
"Stage III" = "Stage III",
"Stage IIIA" = "Stage III",
"Stage IIIB" = "Stage III",
"Stage IIIC" = "Stage III",
"Stage IV" = "Stage IV",
"Stage IVA" = "Stage IV",
"Stage IVB" = "Stage IV",
"Stage IVC" = "Stage IV",
"Stage Unknown" = "Unknown")
# Add a new column for main stages
dd$main_stage <- substage_to_main[dd$stage]
stage <- ggplot(dd, aes(main_stage))+
geom_bar(fill = 'lightblue', col = 'black')+
labs(title = 'Stage')+
xlab('')+
ylab('Count')+
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 16),
plot.subtitle = element_text(hjust = 0.5, face = 'italic', size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
plot.margin = margin(1, 1.5, 1, 1.5, "cm"))
stage
# Stage Bar Chart
plot_stage
stage
dd$race_sorted <- factor(dd$race, levels = names(sort(table(dd$race),
decreasing = TRUE)))
levels(dd$race_sorted) <- c('white', 'not reported', 'black', 'asian',
'pacific islander', 'native american')
# Plot the bar chart
race <- ggplot(dd, aes(race_sorted)) +
geom_bar(aes(fill = race_sorted), show.legend = F) +
labs(title = 'Ethnicity', fill = '') +
xlab('') +
ylab('Count') +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 16),
plot.subtitle = element_text(hjust = 0.5, face = 'italic', size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 14),
plot.margin = margin(1, 1.5, 1, 1.5, "cm"))
race
#### Together ----
ggarrange(age, vital, stage, race, ncol = 4)
# Plot ethnicity distribution
ggplot(metadata, aes(x = ethnicity_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Ethnicities", x = "", y = "") +
mytheme
#### Ethnicity -----------------------------------------------------------------
dd$race_sorted <- factor(dd$race, levels = names(sort(table(dd$race),
decreasing = TRUE)))
levels(dd$race_sorted)
levels(metadata$ethnicity_sorted) <- c('white', 'not reported', 'black', 'asian',
'hispanic', 'pacific islander', 'native american')
# Plot ethnicity distribution
ggplot(metadata, aes(x = ethnicity_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Ethnicities", x = "", y = "") +
mytheme
# Plot ethnicity distribution
plot_ethnicities <-
ggplot(metadata, aes(x = ethnicity_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Ethnicities", x = "", y = "") +
mytheme
ggplot(metadata, aes(x = age_at_diagnosis)) +
geom_histogram(binwidth = 5, fill = "lightblue", col = "black") +
labs(title = "Age Distribution at Diagnosis", x = "Age", y = "Count") +
mytheme
ggplot(metadata, aes(x = age_at_diagnosis)) +
geom_histogram(binwidth = 5, fill = "lightblue", col = "black") +
labs(title = "Age Distribution at Diagnosis", x = "Age", y = "Count") +
geom_vline(aes(xintercept = mean(age_at_diagnosis, na.rm = TRUE)), size = 1,
lty = 2, col = 'red', alpha = .8, show.legend = FALSE)+
mytheme
plot_age_simple <-
ggplot(metadata, aes(x = age_at_diagnosis)) +
geom_histogram(binwidth = 5, fill = "lightblue", col = "black") +
labs(title = "Age Distribution at Diagnosis", x = "Age", y = "Count") +
geom_vline(aes(xintercept = mean(age_at_diagnosis, na.rm = TRUE)), size = 1,
lty = 2, col = 'red', alpha = .8, show.legend = FALSE)+
mytheme
plot_age_by_gender <-
annotate_figure(
ggarrange(
ggplot(metadata, aes(age_at_diagnosis)) +
geom_histogram(aes(y =..density..), fill = 'lightblue', col = 'black',
binwidth = 5)+
geom_vline(aes(xintercept = mean(age_at_diagnosis, na.rm = TRUE)), size = 1,
lty = 2, col = 'red', alpha = .8, show.legend = FALSE)+
labs(title = 'Age distribution',
subtitle = 'Mean overlaid')+
xlab('Age [years]')+
theme_bw()+
theme(plot.title= element_text(hjust= 0.5),
plot.subtitle= element_text(hjust= 0.5, face = 'italic')),
# Birth year
ggplot(metadata, aes(birth_year)) +
geom_histogram(aes(y =..density..), fill = 'lightblue', col = 'black',
binwidth = 5)+
geom_vline(aes(xintercept = mean(birth_year, na.rm = TRUE)), size = 1,
lty = 2, col = 'red', alpha = .8, show.legend = FALSE)+
labs(title = 'Year of birth',
subtitle = 'Mean overlaid')+
xlab('Age [years]')+
theme_bw()+
theme(plot.title= element_text(hjust= 0.5),
plot.subtitle= element_text(hjust= 0.5, face = 'italic')),
ncols = 2),
top = text_grob('Age at diagnosis', face = 'bold', size = 16))
ggarrange(
ggplot(metadata, aes(age_at_diagnosis)) +
geom_histogram(aes(y =..density..), fill = 'lightblue', col = 'black',
binwidth = 5)+
geom_vline(aes(xintercept = mean(age_at_diagnosis, na.rm = TRUE)), size = 1,
lty = 2, col = 'red', alpha = .8, show.legend = FALSE)+
labs(title = 'Age distribution',
subtitle = 'Mean overlaid')+
xlab('Age [years]')+
theme_bw()+
theme(plot.title= element_text(hjust= 0.5),
plot.subtitle= element_text(hjust= 0.5, face = 'italic')),
ggplot(metadata, aes(age_at_diagnosis))+
geom_histogram(aes(y = ..density..), fill = 'lightblue', col = 'black', binwidth = 5)+
facet_wrap(~sex)+
labs(title = '', subtitle = 'Grouped by sex')+
xlab('Age [years]')+
theme_bw()+
theme(plot.title= element_text(hjust= 0.5),
plot.subtitle= element_text(hjust= 0.5, face = 'italic')),
ncol = 1, nrow = 2)
plot_age_by_gender
plot_age_by_gender <-
ggarrange(
ggplot(metadata, aes(age_at_diagnosis)) +
geom_histogram(aes(y =..density..), fill = 'lightblue', col = 'black',
binwidth = 5)+
geom_vline(aes(xintercept = mean(age_at_diagnosis, na.rm = TRUE)), size = 1,
lty = 2, col = 'red', alpha = .8, show.legend = FALSE)+
labs(title = 'Age distribution',
subtitle = 'Mean overlaid')+
xlab('Age [years]')+
theme_bw()+
theme(plot.title= element_text(hjust= 0.5),
plot.subtitle= element_text(hjust= 0.5, face = 'italic')),
ggplot(metadata, aes(age_at_diagnosis))+
geom_histogram(aes(y = ..density..), fill = 'lightblue', col = 'black', binwidth = 5)+
facet_wrap(~sex)+
labs(title = '', subtitle = 'Grouped by sex')+
xlab('Age [years]')+
theme_bw()+
theme(plot.title= element_text(hjust= 0.5),
plot.subtitle= element_text(hjust= 0.5, face = 'italic')),
ncol = 1, nrow = 2)
plot_age_by_gender
ggarrange(
plot_age_simple,
plot_vital_status,
plot_ethnicities,
plot_stage,
ncol = 2, nrow = 2)
ggarrange(
plot_age_by_gender,
plot_vital_status,
plot_ethnicities,
plot_stage,
ncol = 2, nrow = 2)
# Tumor Type
plot_tumor_type
# Sequence_variants
sequence_variants <- ggplot(dd, aes(reorder(sequence_variant, -table(sequence_variant))))+
geom_bar(fill = 'lightblue', col = 'black', width = 0.5, position = "identity", show.legend = FALSE) +
labs(title = 'Sequence variants',
x = '',
y = 'Variants (log)')+
scale_y_log10(labels = label_log(digits = 2)) +
poster_theme
sequence_variants
# Variant types
plot_variant_types
# Plot distribution of variant types
plot_variant_types <- ggplot(snvs, aes(x = variant_type_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Distribution of Variant Types", x = "Variant Type", y = "Count")+
scale_y_log10() +
mytheme
# Plot distribution of variant types
plot_variant_types <- ggplot(snvs, aes(x = variant_type_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Types", x = "", y = "Count (log10)")+
scale_y_log10() +
mytheme
plot_variant_types
### Variant Types --------------------------------------------------------------
# Sort by frequency
snvs$variant_type_sorted <- factor(
snvs$variant_type,
levels = names(sort(table(snvs$variant_type), decreasing = TRUE))
)
# Plot distribution of variant types
plot_variant_types <- ggplot(snvs, aes(x = variant_type_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Types", x = "", y = "Count (log10)")+
scale_y_log10() +
mytheme
plot_variant_types
levels(dd$variant_classification) <- gsub('_', ' ', levels(dd$variant_classification))
variants <- ggplot(dd, aes(reorder(variant_classification,
-table(variant_classification)[variant_classification])))+
geom_bar(fill = 'lightblue', col = 'black')+
labs(title = 'Variant Classes',
x = '',
y = '')+
scale_y_log10(labels = label_log(digits = 2)) +
poster_theme
variants
ggarrange(snv_types, variants, ncol = 2, align = 'hv')
ggarrange(sequence_variants, variants, ncol = 2, align = 'hv')
snvs$variant_classification_sorted <- factor(
snvs$variant_classification,
levels = names(sort(table(snvs$variant_classification), decreasing = TRUE))
)
# Plot
ggplot(snvs, aes(x = variant_classification_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Classification", x = "", y = "Count") +
coord_flip() +
mytheme
# Plot
ggplot(snvs, aes(x = variant_classification_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Classification", x = "", y = "Count") +
scale_y_log10() +
coord_flip() +
mytheme
plot_variant_types
plot_variant_classification
# Plot
plot_variant_classification <-
ggplot(snvs, aes(x = variant_classification_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Classification", x = "", y = "Count (log10)") +
scale_y_log10() +
coord_flip() +
mytheme
plot_variant_classification
# Plot
plot_variant_classification <-
ggplot(snvs, aes(x = variant_classification_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Classification", x = "", y = "Count (log10)") +
scale_y_log10(labels = scale::number_sci()) +
coord_flip() +
mytheme
# Plot distribution of variant types
plot_variant_types <-
ggplot(snvs, aes(x = variant_type_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Types", x = "", y = "Count (log10)")+
scale_y_log10(labels = label_log(digits = 2)) +
mytheme
# Plot
plot_variant_classification <-
ggplot(snvs, aes(x = variant_classification_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Classification", x = "", y = "Count (log10)") +
scale_y_log10(labels = label_log(digits = 2)) +
coord_flip() +
mytheme
plot_variant_classification
# Plot
plot_variant_classification <-
ggplot(snvs, aes(x = variant_classification_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Classification", x = "", y = "Count (log10)") +
scale_y_log10(labels = label_log(digits = 2)) +
mytheme
plot_variant_classification
# Make labels pretty
levels(snvs$variant_classification_sorted) <- gsub('_', ' ', levels(snvs$variant_classification_sorted))
# Plot
plot_variant_classification <-
ggplot(snvs, aes(x = variant_classification_sorted)) +
geom_bar(fill = "lightblue", col = "black") +
labs(title = "Variation Classification", x = "", y = "Count (log10)") +
scale_y_log10(labels = label_log(digits = 2)) +
mytheme
plot_variant_classification
## Top 10 mutated genes --------------------------------------------------------
# Group the data by gene and calculate the number of variants per gene
variants_per_gene <- dd %>%
group_by(gene) %>%
summarise(num_variants = n()) %>%
arrange(desc(num_variants)) %>%
top_n(10)  # Select the top 10 most mutated genes
variants_per_gene
# Create the bar plot
genes <- ggplot(variants_per_gene,
aes(x = reorder(gene, -num_variants), y = num_variants)) +
geom_bar(stat = "identity", fill = 'lightblue', col = 'black',
show.legend = F) +
labs(title = "Top 10 Most Mutated Genes",
x = "",
y = "Number of Variants") +
theme
genes
# Create the bar plot
genes <- ggplot(variants_per_gene,
aes(x = reorder(gene, -num_variants), y = num_variants)) +
geom_bar(stat = "identity", fill = 'lightblue', col = 'black',
show.legend = F) +
labs(title = "Top 10 Most Mutated Genes",
x = "",
y = "Number of Variants") +
theme_minimal()
genes
he data by gene and calculate the number of variants per gene
variants_per_gene <- snvs %>%
group_by(gene) %>%
summarise(num_variants = n()) %>%
arrange(desc(num_variants)) %>%
top_n(10)  # Select the top 10 most mutated genes
# Create the bar plot
genes <- ggplot(variants_per_gene,
aes(x = reorder(gene, -num_variants), y = num_variants)) +
geom_bar(stat = "identity", fill = 'lightblue', col = 'black',
show.legend = F) +
labs(title = "Top 10 Most Mutated Genes",
x = "",
y = "Number of Variants") +
mytheme
genes
# Create the bar plot
top10_mut_genes <- ggplot(variants_per_gene,
aes(x = reorder(gene, -num_variants), y = num_variants)) +
geom_bar(stat = "identity", fill = 'lightblue', col = 'black',
show.legend = F) +
labs(title = "Top 10 Most Mutated Genes",
x = "",
y = "Number of Variants") +
mytheme
# Top 10 mutated genes
top10_mut_genes
cnvs$affected_genes
# Use separate_rows to split the genes in the 'affected_genes' column
# Then use count to count the occurrences of each gene
gene_counts <- cnvs %>%
separate_rows(affected_genes, sep = ",") %>%
count(affected_genes, name = "cnv_count")
# View the resulting data frame with gene counts
print(gene_counts)
# Remove brackets from affected_genes
cnvs$affected_genes <- gsub("\\[|\\]", "", cnvs$affected_genes)
# Use separate_rows to split the genes in the 'affected_genes' column
# Then use count to count the occurrences of each gene
gene_counts <- cnvs %>%
separate_rows(affected_genes, sep = ",") %>%
count(affected_genes, name = "cnv_count")
# View the resulting data frame with gene counts
print(gene_counts)
# Remove brackets and "'" from affected_genes
cnvs$affected_genes <- gsub("\\[|\\]|'", "", cnvs$affected_genes)
# Use separate_rows to split the genes in the 'affected_genes' column
# Then use count to count the occurrences of each gene
gene_counts <- cnvs %>%
separate_rows(affected_genes, sep = ",") %>%
count(affected_genes, name = "cnv_count")
# View the resulting data frame with gene counts
print(gene_counts)
cnvs$affected_genes %>%
select(affected_genes == "[]")
cnvs$affected_genes %>%
filter(affected_genes == "[]")
cnvs$affected_genes %>%
filter(affected_genes == "")
cnvs %>%
filter(affected_genes == "")
cnvs %>%
filter(affected_genes == " ")
# Remove brackets, " " and "'" from affected_genes
cnvs$affected_genes <- gsub("\\[|\\]|\\'|\\ ", "", cnvs$affected_genes)
# Use separate_rows to split the genes in the 'affected_genes' column
# Then use count to count the occurrences of each gene
gene_counts <- cnvs %>%
separate_rows(affected_genes, sep = ",") %>%
count(affected_genes, name = "cnv_count")
# View the resulting data frame with gene counts
print(gene_counts)
# Make a table of affected genes
affected_genes <- cnvs %>%
select(biosample_id, affected_genes) %>%
distinct(biosample_id, .keep_all = TRUE)
### Genes ----------------------------------------------------------------------
# CNVs that do not affect a single gene
cnvs_intron <- cnvs %>%
filter(affected_genes == "")
length(cnvs_intron)
dim(cnvs_intron)
dim(cnvs_intron)[1]
### Genes ----------------------------------------------------------------------
# CNVs that do not affect a single gene
dim(cnvs %>%
filter(affected_genes == ""))
# View the resulting data frame with gene counts
print(gene_counts)
# View the resulting data frame with gene counts
print(gene_counts)
affected_genes
gene_counts
#### Extending affected genes --------------------------------------------------
# Use separate_rows to split the genes in the 'affected_genes' column
# Then use count to count the occurrences of each gene
snv_genes <- snvs %>%
count(gene, name = "snv_count")
snv_genes
# Join with cnv data
gene_counts$gene <- gene_counts$affected_genes
gene_counts
gene_counts <- gene_counts %>%
select(-c(affected_genes)) %>%
left_join(snv_genes, by = "gene")
gene_counts
affected_genes
# Sort by frequency
gene_counts <- gene_counts %>%
arrange(desc(cnv_count))
gene_counts
install.packages("devtools")
devtools::install_github("progenetix/pgxRpi")
install.packages("mongolite")
.rs.restartR()
